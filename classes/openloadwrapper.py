import os
import requests
import time
from openload import OpenLoad
from openload.api_exceptions import FileNotFoundException
from requests_toolbelt.multipart import encoder


class OpenloadWrapper(OpenLoad):
    """
    This class is more than an "extender" than a "wrapper". In fact this class extends OpenLoad class adding two more methods.
    """

    def failed_conversions(self):
        pass

    def __init__(self, username: str, key: str):
        """
        Parametrized constructor method.

        :param username: API username that will be used to login on OpenLoad.co
        :param key: API key that will be used to login on OpenLoad.co
        """

        # Call superclass constructor
        super(OpenloadWrapper, self).__init__(username, key)

    def upload_large_file(self, file_path, **kwargs):
        """
        This method is used to upload large files on OpenLoad (not used yet)
        :param file_path: Path to the file to upload to OpenLoad.co
        """

        response = self.upload_link(**kwargs)

        upload_url = response['url']
        _, file_name = os.path.split(file_path)
        with open(file_path, 'rb') as upload_file:
            data = encoder.MultipartEncoder({
                "files": (file_name, upload_file, "application/octet-stream"),
            })
        headers = {"Prefer": "respond-async", "Content-Type": data.content_type}
        response_json = requests.post(upload_url, headers=headers, data=data).json()
        self._check_status(response_json)

        return response_json['result']

    def get_thumbnail_when_ready(self, media_id, delay, threshold=0.1):
        """
        This method is used to get the thumbnail image url when it's ready on OpenLoad.co.

        :param media_id: Media id that identifies the video.
        :param delay: Delay between retries.
        :param threshold: Adds a little margin to the delay, its default value is 0.25.
        :return Url as string object where you can download the thumbnail image generated by OpenLoad.co.
        """

        print("[OpenloadWrapper] Waiting {} seconds for thumbnail generation".format(delay))
        time.sleep(delay + (delay * threshold))

        try:
            url = self.splash_image(media_id)

            if url is None or url == "None":
                print("[OpenloadWrapper] Thumbnail request returned None. Retry...")
                raise FileNotFoundException("None returned by OpenLoad, need to wait a bit more")
            else:
                print("[OpenLoadWrapper] Found a url: {} Type of: {}".format(url, type(url)))
                return url

        except FileNotFoundException:
            print("[OpenloadWrapper] Thumbnail not ready yet")
            self.get_thumbnail_when_ready(media_id, delay)
