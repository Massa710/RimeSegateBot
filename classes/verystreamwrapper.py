import os
import time
import requests
from requests_toolbelt import MultipartEncoder

from verystream import *


class VeryStreamWrapper(Verystream):
    """
    This class is more than an "extender" than a "wrapper". In fact this class extends VeryStream class adding some methods.
    """

    def __init__(self, username: str, key: str, **kwargs):
        """
        Parametrized constructor method.

        :param username: API username that will be used to login on VeryStream.com
        :param key: API key that will be used to login on VeryStream.com
        """

        # Call superclass constructor
        super(VeryStreamWrapper, self).__init__(username, key, **kwargs)

    def get_thumbnail_when_ready(self, media_id, delay, threshold=0.0):
        """
        This method is used to get the thumbnail image url when it's ready on VeryStream.co.

        :param media_id: Media id that identifies the video.
        :param delay: Delay between retries.
        :param threshold: Adds a little margin to the delay, its default value is 0.25.
        :return Url as string object where you can download the thumbnail image generated by VeryStream.com.
        """

        print("[VeryStreamWrapper] Waiting {} seconds for thumbnail generation".format(delay))
        time.sleep(delay + (delay * threshold))

        try:
            url = self.splash_image(media_id)
            print("[VeryStreamWrapper] Returned url: {}".format(str(url)))
            return url
        except:
            print("[OpenloadWrapper] Thumbnail not ready yet")
            self.get_thumbnail_when_ready(media_id, delay)

    def upload_large_file(self, file_path, **kwargs):
        response = self.upload_link(**kwargs)
        upload_url = response.get("url")

        _, file_name = os.path.split(file_path)

        with open(file_path, 'rb') as upload_file:
            data = MultipartEncoder({
                "files": (file_name, upload_file, "application/octet-stream"),
            })

            headers = {"Prefer": "respond-async", "Content-Type": data.content_type}
            response_json = requests.post(upload_url, headers=headers, data=data).json()

        self._check_status(response_json)
        return response_json['result']